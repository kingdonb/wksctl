// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Manifests statically implements the virtual filesystem provided to vfsgen.
var Manifests = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 5, 19, 25, 36, 264365585, time.UTC),
		},
		"/01_namespace.yaml": &vfsgen۰FileInfo{
			name:    "01_namespace.yaml",
			modTime: time.Date(2019, 10, 5, 16, 39, 48, 118816390, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x0a\x20\x20\x20\x20\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x74\x6f\x6f\x6c\x73\x2e\x6b\x38\x73\x2e\x69\x6f\x3a\x20\x22\x31\x2e\x30\x22\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a"),
		},
		"/02_rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "02_rbac.yaml",
			modTime:          time.Date(2019, 10, 5, 16, 39, 48, 119010560, time.UTC),
			uncompressedSize: 1131,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xb1\x92\xd3\x30\x10\xed\xfd\x15\x3b\x77\xb5\x93\xa1\x63\xdc\x01\x05\x05\xdd\x1d\x03\xf5\x5a\x7a\x89\x45\x64\xad\x90\x56\xce\x1c\x5f\xcf\x58\x8e\xc3\xe5\x02\x19\x18\x8a\xab\xfc\x56\x5a\xed\xbe\xf7\x3c\xaf\x6d\xdb\x86\xa3\xfb\x82\x94\x9d\x84\x8e\x52\xcf\x66\xc3\x45\x07\x49\xee\x07\xab\x93\xb0\x39\xbc\xcd\x1b\x27\xdb\xe9\x4d\x73\x70\xc1\x76\xf4\xc1\x97\xac\x48\x0f\xe2\xd1\x8c\x50\xb6\xac\xdc\x35\x44\x81\x47\x74\x74\x3c\xe4\xd6\x48\xd0\x24\xde\x23\xb5\x69\xee\x4a\xc5\x23\x77\x4d\x4b\x1c\xdd\xc7\x24\x25\xe6\xb9\xbf\x25\xb3\x4c\x3a\x6d\x68\x88\x12\xb2\x94\x64\x70\x79\x9f\x6b\x31\xb2\x19\x5c\xc0\x65\xb1\xcd\xca\x5a\x2e\xce\x2c\xa2\x97\xa7\x11\x41\x2f\x5b\x51\xeb\x09\xa9\x3f\x4d\xdf\x43\xeb\xd7\xbb\xbc\x80\x23\xab\x19\x96\xc5\x09\xac\xa8\xb0\x44\xbb\xc2\x78\xbe\xb7\xf0\x50\x5c\x0b\xba\xbb\x7b\x29\xe2\x9e\xa2\xd8\xbc\xc5\xe4\xcc\x6c\x26\xb9\x4c\x09\xdf\x8b\x4b\xb0\xb4\x93\x44\x3a\x80\xbe\x7e\x7a\xa4\x5f\x96\x91\x0a\xf5\x20\xee\x3d\x66\x58\x5f\xd6\x21\x75\x5a\x89\x12\x56\x49\x0b\x0d\x27\x21\x6f\x16\x7e\xcf\x37\x9d\x4f\x2a\x08\x62\x4f\xce\x61\x3a\x3b\x93\x61\xd2\xeb\xb8\xd2\xce\x7a\x77\x6e\x3f\x72\xbc\xb5\xfe\x9e\x3e\x0f\xa0\x1e\x5e\x8e\xff\x6e\xdc\xc2\x86\x2c\x63\x94\x50\xff\xfe\x9f\xdd\xbb\xa2\xcc\xb1\x12\x7b\x41\xfa\xd9\xac\xdf\x92\x5e\x0d\xf8\xaf\x4c\xbd\x77\xc1\xba\xb0\xff\xbb\x68\xf5\xa7\xe6\x19\x3f\x60\x37\xf7\xae\x4a\x6e\xec\x6d\x88\xae\xa3\x7c\x2b\xc0\xb9\xf4\xdf\x60\xb4\x66\x78\x79\xf9\x88\x34\x39\x83\x77\xc6\x48\x09\x7a\x7e\x6c\xb1\xe3\xe2\xd7\x3a\x47\x36\xe8\x28\x3f\x65\xc5\xd8\xfc\x0c\x00\x00\xff\xff\x3c\x15\x72\x25\x6b\x04\x00\x00"),
		},
		"/03_secrets.yaml": &vfsgen۰FileInfo{
			name:    "03_secrets.yaml",
			modTime: time.Date(2019, 10, 5, 16, 39, 48, 119196817, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x53\x65\x63\x72\x65\x74\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x77\x6b\x73\x2d\x63\x6f\x6e\x74\x72\x6f\x6c\x6c\x65\x72\x2d\x73\x65\x63\x72\x65\x74\x73\x0a\x20\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x73\x79\x73\x74\x65\x6d\x0a\x74\x79\x70\x65\x3a\x20\x4f\x70\x61\x71\x75\x65\x0a\x64\x61\x74\x61\x3a\x0a\x20\x20\x73\x73\x68\x4b\x65\x79\x3a\x20\x22\x22\x0a"),
		},
		"/04_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "04_controller.yaml",
			modTime:          time.Date(2019, 10, 5, 19, 25, 36, 263112998, time.UTC),
			uncompressedSize: 1517,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x72\xdb\x38\x0c\xbe\xeb\x29\x30\xde\x6b\x24\xdb\xbb\x97\x1d\xde\x32\x6d\x6e\x4d\x3b\xd3\x74\x7a\x87\x48\xc4\x62\xc5\xbf\x12\x50\x1c\xbd\x7d\x87\xb2\x22\xdb\x1d\x27\x4e\xeb\x9b\x41\xe0\xfb\x01\xf9\xa9\xae\xeb\x0a\x93\xfd\x4e\x99\x6d\x0c\x0a\x30\x25\x5e\x3f\x6d\xab\xde\x06\xa3\xe0\x23\x25\x17\x47\x4f\x41\x2a\x4f\x82\x06\x05\x55\x05\x10\xd0\x93\x82\x7d\xcf\xb5\x8e\x41\x72\x74\x8e\xf2\x5c\xe6\x84\x9a\x14\xf0\xc8\x42\xbe\x02\x70\xd8\x92\xe3\x32\xf4\xea\x18\xc0\xfc\xb7\x4e\x0e\xc3\x9b\x1d\x8e\x72\x2d\x31\x3a\x6e\xfa\xff\xb9\xb1\x51\xc1\x6a\xdb\x6c\x56\x15\x27\xd2\x85\x23\x53\x72\x56\x23\x2b\xd8\x56\x00\x4c\x8e\xb4\xc4\x7c\x60\xf7\x28\xba\xfb\x74\x22\xe7\x55\x41\x42\x3e\x39\x14\x9a\xe7\x4e\x8c\x97\x9f\x3b\x83\x78\xc3\xd5\xfb\x9c\xbd\xc3\x5d\x69\x79\x71\x38\x31\x46\x43\x0f\x67\xde\x5e\xaa\x75\x8e\x8e\x9a\x7e\x68\x29\x07\x12\x2a\x20\x6b\x8f\x2c\x94\x15\xac\x56\x73\xab\x44\x47\x19\xc5\xc6\xb0\xb8\xf8\x07\x6e\x9d\x8b\x7b\x60\xdd\x91\x19\x9c\x0d\x3b\x88\x01\x0e\x93\x13\x30\x37\xf0\xad\xb3\x0c\x96\x21\xd3\xcf\xc1\x66\x32\xd0\x92\xc6\x81\x09\xcc\x90\x6d\xd8\x2d\x48\x6d\x8c\xc2\x92\x31\xa5\x09\xe6\x11\xa4\x23\xd0\x6e\x28\x58\x37\xb0\x27\xf0\x38\x82\x0d\x56\x2c\x3a\x37\x42\x87\x4f\x04\x3f\x06\x16\x88\x81\x66\xca\x9b\x05\x0c\x83\x81\x7d\x1c\x9c\x29\x28\x01\x02\x91\x01\x89\x60\xa6\x77\x09\x52\x24\x1d\x97\x57\x7a\x32\x95\x73\x26\x99\x68\x29\x88\xcd\xb4\xa0\xcd\x2a\x60\x48\xcd\x5c\xab\x81\x1e\x1f\x49\x8b\x82\xcf\xf1\xe1\x60\x9e\x96\x8d\xf6\x34\xaa\x2b\x6b\x5d\x7a\x63\x2a\x3b\x8d\x59\xc1\xdd\xb3\x65\xe1\x85\xf3\x1e\x73\x7f\x10\x8a\x0c\x08\x3a\x5b\xb1\x1a\x1d\xa0\x31\x31\xa8\x45\xc6\xc4\xf5\x61\x3e\xbc\x2d\x67\xfc\x25\xb8\xf1\x3a\x7e\xe9\x7a\xb9\x37\x2a\xb7\x36\x5d\x17\xec\x3b\xab\x3b\xc0\x4c\x90\x09\xcd\x38\x2d\x32\x13\xea\x0e\x5b\x47\xea\x82\xfb\xbb\x67\xd2\x83\x5c\x30\xdf\xa0\x4b\x1d\xfe\xe6\x3e\x44\xf9\x5a\x70\xaf\xe9\xfb\x7b\x86\x21\x2c\x72\xaf\x91\x94\x17\x80\x36\x50\xe6\xa3\xb1\x43\x2a\x2f\x64\xcd\x7a\xdc\x91\x82\xde\x86\x9d\x89\xa1\x5d\x9f\x47\x52\x95\xdc\xb3\x9c\x24\xd3\x7b\x0c\xe6\x98\xb2\x1a\xd6\xad\x0d\xeb\x0b\xc0\x35\xd4\xf5\x13\xe5\x36\xf2\x51\x70\x26\x8e\x43\xd6\x74\xf2\xb9\x00\x70\xd6\x5b\x39\xab\x00\xe8\x34\x28\xd8\x6e\x36\xfe\xac\xea\xc9\xc7\x3c\x2a\xf8\x6f\x73\x6f\x4f\x0e\x4a\x02\x89\xff\x0c\xe2\xdf\x02\xf1\x2b\x00\x00\xff\xff\x82\x90\xde\xcc\xed\x05\x00\x00"),
		},
		"/05_sealed_secret_controller.yaml": &vfsgen۰CompressedFileInfo{
			name:             "05_sealed_secret_controller.yaml",
			modTime:          time.Date(2019, 10, 5, 16, 39, 48, 119591731, time.UTC),
			uncompressedSize: 2697,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xc1\x76\xdb\x36\x10\xbc\xf3\x2b\xf6\xa5\xd7\x90\x96\x4f\xf5\xe3\xcd\x4d\xdb\xdc\xdc\x3c\xa7\xed\x7d\x09\x8c\x4d\x44\x20\xc0\x00\x0b\x39\xcc\xd7\xf7\x81\xa2\x28\x4a\xb1\xa2\xd8\x55\x0f\xe5\x45\x10\xb0\x9c\xd9\x99\x5d\x2e\xca\xb2\x2c\xb8\x37\x7f\x23\x44\xe3\x5d\x4d\x9b\xeb\x62\x6d\x9c\xae\xe9\x23\xc2\xc6\x28\xdc\x2a\xe5\x93\x93\xa2\x83\xb0\x66\xe1\xba\x20\x72\xdc\xa1\xa6\x08\xb6\xd0\x65\x84\x0a\x90\x58\x2a\xef\x24\x78\x6b\x11\xa6\x88\xd8\xb3\x42\x4d\xeb\xd4\xa0\x8c\x43\x14\x74\xc5\x31\x19\xf7\x7d\xbc\xda\x5c\x37\x10\xde\xd1\xfe\x8a\xde\xfa\xa1\xc3\xa5\x28\x63\x0f\x95\x01\x04\x5d\x6f\x59\x90\xd7\x44\x4b\xe8\xfc\x58\x6e\x60\xe3\xee\xdf\x8f\xd0\x11\xed\x90\xf3\x23\xde\x22\xb0\x18\xef\x66\x90\x9f\xe8\xd6\x5a\xff\x44\x51\xb5\xd0\xc9\x1a\xf7\x48\xde\x51\xc7\x51\x10\xc8\x79\x8d\x58\xd1\x9f\xad\x89\x64\x22\x05\x7c\x4e\x26\x40\x53\x03\xc5\x29\x82\x74\x0a\xc6\x3d\xce\x48\x8d\xf7\x12\x25\x70\xdf\x8f\x30\x0f\x24\x2d\x48\xd9\x94\xb1\xde\xd2\x13\xa8\xe3\x81\x8c\x33\x62\xd8\xda\x81\x5a\xde\x80\x3e\xa5\x28\xe4\x1d\x26\xca\xb7\x33\x18\x3b\x4d\x4f\x3e\x59\x9d\x51\x1c\x39\x40\x93\x78\xd2\xa3\xf1\x24\x39\xa5\xbd\xd2\x1c\x13\x90\xcf\x23\x64\xa4\x85\x13\x13\x30\xa3\x4d\x59\x50\xea\xab\x69\xaf\x24\x3c\x3c\x40\x49\x4d\x77\xfe\xe3\x56\x3c\x66\x63\xd7\x18\xea\x51\x7d\x19\xbc\x45\x95\x2b\x15\x1c\x04\xb1\x32\xfe\x6a\x9b\xe9\x1c\xeb\xfb\xec\xa9\x0f\x35\xfd\xf6\xc5\x44\x89\xd3\x41\x4e\x8e\x8d\x43\x98\xad\x2e\x49\xf9\xae\x63\xa7\xf7\x05\x2c\xe9\xa8\x5a\xf9\x31\x1d\x3f\xa2\xa6\xcf\x89\x87\x4c\xd7\x18\x71\xdc\x99\xab\x93\x65\xae\x37\xab\xea\xe7\x6a\x35\xbf\x6f\xcd\x06\x0e\x31\x7e\x08\xbe\xc1\x9e\x8b\xa8\x15\xe9\xdf\x43\x96\x5b\x44\x3d\x4b\x5b\xd3\x55\x0b\xb6\xd2\x7e\x3d\x3c\xf2\x41\x6a\xba\x59\xdd\xac\x5e\xd4\x71\xbb\x57\xe3\xb1\xce\xd1\x8e\x0f\xdf\x82\xee\x60\x73\x7e\xf3\x66\x00\x6b\xf3\x5f\xc9\x88\x50\x29\x18\x19\xde\x79\x27\xf8\x72\x00\x95\x79\xff\x70\x76\xb8\xf7\x5e\x7e\x37\x16\xdb\x0f\xb4\x26\x09\x09\xcb\xb0\xe4\x6e\xe3\x9d\x77\x39\xec\xf9\xc3\xbf\x22\x42\x4d\xd7\xab\xd5\x75\xb1\x23\x5d\x8e\xaa\xbb\x33\x4e\x9e\x9b\x78\x97\x9d\x3b\x73\xbd\xca\x43\xbb\x22\x2c\x54\x6e\xee\xe2\x47\xaa\x7f\x9c\x73\x68\x58\x55\x9c\xa4\xf5\xc1\x7c\x1d\xe7\x4e\xb5\xbe\x19\xbf\xa1\xc3\x69\x7a\xef\x2d\x7e\x31\x4e\xe7\x61\x72\x11\x59\xf9\xab\xbd\xc7\x43\xc6\xe0\xde\xbc\x0f\x3e\xf5\xdf\xc9\xa6\x20\xda\xe7\x71\x8a\x76\x8d\xa1\x64\xdd\x19\x57\xc4\xd4\x7c\x82\xca\x76\x95\x0b\xf4\x37\x6f\x66\x98\xa3\x3b\xe9\x82\x37\xd1\x4b\x0c\x3d\xef\xe4\x5e\xd2\x69\x23\x93\xc5\x81\xd0\xa9\x49\x46\xb5\x01\xd1\xa7\xa0\x90\x5b\x79\xda\xff\x96\x61\x11\x37\xc7\x8c\x87\x05\xd1\x06\xa1\x99\x36\x1f\x21\x67\x58\xbe\xf7\xb6\x0a\x60\xc1\xab\xed\x7a\xb7\xbd\x1d\x5e\xdb\x86\xaf\xec\xb6\x05\xeb\x82\x64\x8b\x9e\xdc\x48\x17\xfe\x0f\xcd\xb6\xd4\xf1\x9c\x6d\x47\x8a\x4e\xb5\xd4\x74\xcf\x55\xca\x77\xcf\x55\x3d\xcb\x39\xd9\x39\xf9\xd7\x9a\xb8\x5d\x3c\xb1\xa8\xf6\xdf\x37\x53\x5e\xa6\x5e\xef\x96\x1a\x16\x82\xe2\x9f\x00\x00\x00\xff\xff\xef\x50\xa6\x55\x89\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_namespace.yaml"].(os.FileInfo),
		fs["/02_rbac.yaml"].(os.FileInfo),
		fs["/03_secrets.yaml"].(os.FileInfo),
		fs["/04_controller.yaml"].(os.FileInfo),
		fs["/05_sealed_secret_controller.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
